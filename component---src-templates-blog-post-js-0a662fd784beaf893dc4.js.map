{"version":3,"file":"component---src-templates-blog-post-js-0a662fd784beaf893dc4.js","mappings":"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","sources":["webpack://thomas-blog/./src/components/bio.js","webpack://thomas-blog/./src/components/layout.js","webpack://thomas-blog/./src/components/seo.js","webpack://thomas-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            dp\r\n            bio\r\n            social {\r\n              twitter {\r\n                title\r\n                url\r\n                username\r\n              }\r\n              github {\r\n                title\r\n                url\r\n                username\r\n              }\r\n              dev {\r\n                title\r\n                url\r\n                username\r\n              }\r\n              email {\r\n                title\r\n                url\r\n                username\r\n              }\r\n              linkedin {\r\n                title\r\n                url\r\n                username\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social_ids = data.site.siteMetadata?.author?.social\r\n  const _social_ids = Object.keys(social_ids)\r\n\r\n  return (\r\n    <section className=\"bio\">\r\n      <section className=\"imgWrapper\">\r\n        <img src={author.dp} alt=\"DP\" />\r\n      </section>\r\n      <section className=\"bioWrapper\">\r\n        <div\r\n          className=\"textWrapper\"\r\n          dangerouslySetInnerHTML={{ __html: author.bio }}\r\n        />\r\n        <div className=\"socialWrapper\">\r\n          {_social_ids.map((social_id, i) => (\r\n            <a\r\n              href={social_ids[social_id].url + social_ids[social_id].username}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              key={i}\r\n            >\r\n              <img\r\n                src={`/blog/icons/${social_ids[social_id].title}.png`}\r\n                alt={social_ids[social_id].title}\r\n              />\r\n            </a>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/blog\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/blog\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { previous, next, site, markdownRemark: post },\r\n  location,\r\n}) => {\r\n  const siteTitle = site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n          <p>{post.frontmatter.date}</p>\r\n        </header>\r\n        <section\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n        <footer>\r\n          <Bio />\r\n        </footer>\r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ data: { markdownRemark: post } }) => {\r\n  return (\r\n    <Seo\r\n      title={post.frontmatter.title}\r\n      description={post.frontmatter.description || post.excerpt}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","_data$site$siteMetada3","data","useStaticQuery","author","site","siteMetadata","social_ids","social","_social_ids","Object","keys","React","className","src","dp","alt","dangerouslySetInnerHTML","__html","bio","map","social_id","i","href","url","username","target","rel","key","title","_ref","location","children","isRootPath","pathname","header","Link","to","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","metaDescription","defaultTitle","name","content","property","twitter","Head","_ref2","markdownRemark","post","Seo","frontmatter","excerpt","previous","next","siteTitle","Layout","itemScope","itemType","itemProp","date","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug"],"sourceRoot":""}